name: "Deploy iOS XCFramework"

on:
  workflow_dispatch:

env:
  SDK_NAME: "AppPackage"
  OUTPUT_PATH: ${{ github.workspace }}/ios-framework
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy-ios-xcframework:
    runs-on: macos-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: workaround for detached HEAD
        run: git checkout ${{github.head_ref}} && git pull

      - uses: Atsumi3/actions-setup-fvm@0.0.2

      - name: Set ReleaseTag
        id: release_tag
        run: echo "RELEASE_TAG=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: build
        working-directory: packages/native_module
        run: |
          fvm flutter pub get
          fvm flutter build ios-framework --no-debug --no-profile --xcframework

      - name: ZIP Archive
        working-directory: packages/native_module/build/ios/framework/Release
        run: |
          mkdir -p $OUTPUT_PATH
          for dir in *; do
            zip -r $OUTPUT_PATH/$dir.zip $dir
          done

      - name: Extract ZIP file lists
        working-directory: ${{ env.OUTPUT_PATH }}
        id: extract_zip_file_lists
        run: |
          currentDir=$(pwd)
          currentZipFiles=$(ls *.zip)
          files_commna=()
          for file in $currentZipFiles
          do
              files_commna+=("$currentDir/$file")
          done
          # カンマ区切り
          files_commna=$(IFS=,; echo "${files_commna[*]}")
          echo "ZIPFILES=$files_commna" >> "${GITHUB_OUTPUT}"

      - name: Release
        uses: softprops/action-gh-release@v1
        id: create_release
        with:
          name: ${{ steps.release_tag.outputs.RELEASE_TAG }}
          tag_name: ${{ steps.release_tag.outputs.RELEASE_TAG }}
          files: ${{ steps.extract_zip_file_lists.outputs.ZIPFILES }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Stored File URL
        id: set_stored_file_url
        run: |
          fileUrl="https://github.com/${{ github.repository }}/releases/download/${{ steps.release_tag.outputs.RELEASE_TAG }}/"
          echo "FILE_URL=$fileUrl" >> "${GITHUB_OUTPUT}"

      - name: Create Package.swift
        working-directory: ${{ env.OUTPUT_PATH }}
        run: |
          # フォルダ内の.zipファイルを配列で取得する
          assetsFiles=($(ls *.zip))

          # Package.swiftのproducts/libraryに入れる内容
          PACKAGE_TARGETS=()
          for file in "${assetsFiles[@]}"; do
            # .xcframework.zipを削除し""で囲む
            # PACKAGE_TARGETS+=("$(echo $file | sed -e 's/.xcframework.zip//g')")
            ASSET_FILE_NAME=$(echo $file | sed -e 's/.xcframework.zip//g')
            ASSET_FILE_NAME=("\"$ASSET_FILE_NAME\"")
            PACKAGE_TARGETS+=($ASSET_FILE_NAME)
          done
          PACKAGE_TARGETS=$(IFS=,; echo "${PACKAGE_TARGETS[*]}")
          PACKAGE_TARGETS=$(echo $PACKAGE_TARGETS | sed -e 's/,/,\
          /g')

          # Package.swiftのtargetsに入れる内容
          PACKAGE_BINARY_TARGETS=()
          for file in "${assetsFiles[@]}"; do
            FILENAME_WITHOUT_EXT=$(echo $file | sed -e 's/.xcframework.zip//g')
            URL="${{ steps.set_stored_file_url.outputs.FILE_URL }}$file"
            CHECKSUM=$(shasum -a 256 $file | sed -e 's/ .*//g')
            BINARY_TARGET=$(cat <<EOF

                .binaryTarget(
                  name: "$FILENAME_WITHOUT_EXT",
                  url: "$URL",
                  checksum: "$CHECKSUM"
                )
          EOF
              )
            PACKAGE_BINARY_TARGETS+=("$BINARY_TARGET")
          done
          PACKAGE_BINARY_TARGETS=$(IFS=,; echo "${PACKAGE_BINARY_TARGETS[*]}")

          # Package.swiftを作成する
          packageSwift=$(cat <<EOF
          // swift-tools-version:5.9
          import PackageDescription

          let package = Package(
              name: "$SDK_NAME",
              platforms: [.iOS(.v14)],
              products: [
                .library(
                  name: "$SDK_NAME",
                  targets: [
                    $PACKAGE_TARGETS
                  ]
                )
              ],
              targets: [
                $PACKAGE_BINARY_TARGETS
              ],
              swiftLanguageVersions: [.v5]
          )
          EOF
          )

          echo "$packageSwift" > ${{github.workspace}}/Package.swift

      - name: Create new branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # ${{ steps.release_tag.outputs.RELEASE_TAG }} のスペースを_に置換
          release_tag=$(echo "${{ steps.release_tag.outputs.RELEASE_TAG }}" | sed -e 's/ /_/g')
          git switch -c bot/$release_tag
          git add Package.swift
          git commit -m "Update Pacakge.swift ${{ steps.release_tag.outputs.RELEASE_TAG }}"
          git push -u origin bot/$release_tag

      - name: Check PullRequest Exists
        id: check_pr
        env:
          HEAD_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          COMMIT_MESSAGE=$(echo "${HEAD_MESSAGE}" | sed -n -e 1p)
          echo "message=${COMMIT_MESSAGE}" >> "$GITHUB_OUTPUT"
          echo "count=$(gh pr list -S 'Update Pacakge.swift'in:title | wc -l)" >> "$GITHUB_OUTPUT"

      - name: Create Release Pull Request
        if: ${{ steps.check_pr.outputs.count == 0 }}
        run: |
          gh pr create \
            -B main \
            -t 'Update Pacakge.swift ${{ steps.check_pr.outputs.message }}' \
            -a ${{ github.actor }}  \
            --body-file ./.github/RELEASE_WORKFLOW_TEMPLATE.md

      - name: Edit Release Pull Request
        if: ${{ steps.check_pr.outputs.count != 0 }}
        run: |
          pr_data=$(gh pr list -S 'Update Pacakge.swift'in:title \
            --json "title" \
            | jq -c .[])
          TITLE="$(echo $pr_data | jq -r '.title')"
          echo $TITLE
          gh pr edit  ${{ github.ref_name }} \
            -t "${TITLE} / ${{ steps.check_pr.outputs.message }}"
